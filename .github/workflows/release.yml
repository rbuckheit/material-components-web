name: MDC Release

# This workflow does the following if repo does not have git tag that was updated in lerna.json
#  - creates release git tag
#  - publishes packages to NPM with latest tag
#
# This workflow is expected to run after merge of release pull requested created by release-pull-request workflow.

on:
  push:
    branches:
      - master
    paths:
      - 'lerna.json'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v1.0.0
      - name: Checkout master branch
        # GITHUB_REF:11 gets `refs/heads/master` => `master`.
        # See https://github.com/actions/checkout/issues/6
        run: |
          git checkout "${GITHUB_REF:11}"
          git pull
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 10
          registry-url: https://registry.npmjs.org/
      - name: Install dependencies
        run: |
          npm install
      - name: Check if release tag is already created
        id: vars
        # Sets action's output parameter using `set-output`.
        # See https://help.github.com/en/github/automating-your-workflow-with-github-actions/development-tools-for-github-actions#set-an-output-parameter-set-output
        run: |
          MDC_CURRENT_VERSION="v$(npm run version --silent)"
          # If empty then set `mdc_version_changed` variable to `true`
          [[ -z $(git tag -l "$MDC_CURRENT_VERSION") ]] && echo "::set-output name=mdc_version_changed::true
      - name: Build packages
        if: steps.vars.outputs.mdc_version_changed == true
        run: |
          npm run dist
          node scripts/cp-pkgs.js
          node scripts/verify-pkg-main.js
      - name: Create release tag
        if: steps.vars.outputs.mdc_version_changed == true
        run: |
          MDC_CURRENT_VERSION="v$(npm run version --silent)"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "$MDC_CURRENT_VERSION"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git push origin "$MDC_CURRENT_VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to NPM registry
        if: steps.vars.outputs.mdc_version_changed == true
        run: npx lerna publish from-package --yes
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}
